//***************************************************************************
// TestSuite.cpp                                                            *
// Content: this class perform some tests as defined in the given config-file*
//                      and prints the results                              *
//                      Timo Henrich , SC RWTH Aachen                       *            
// Version: 0.1                                                             *
// Date:                                                                    *
// Begin:   30. August 2007                                                 *

// Main class of the application. Is used to perform tests and generate 
// reports to tty or files
//

 // include standards
#include <iostream>
#include <iomanip>
#include <fstream>
#include <stdio.h>
#include <map>
#include <regex.h>
#include <math.h>
#include <stdlib.h>
#include "./Reporter.h"
#include <string>
#include "./tinyxml.h"

using namespace std;


#ifndef __TESTSUITE__
#define __TESTSUITE__

class TestSuite {
        
  private:
    string configFile ; // Filename of the used configuration-file
    Reporter * lastReport ; // A pointer to the report generated by the last test.
        
                
  public:
  /** The class-construktor
   *
   * \param (optional) Takes the path of a configuration-file
   */
    TestSuite(const string configFile) {
      this->configFile ="";
      this->setConfigFile(configFile.c_str());
                                                        
    } // END OF FUNCTION
        
     /**
     * The class-destructor
     * Used to clean up the memory afterwards
     */
    ~TestSuite() {      
      delete (this->lastReport);
    } // END OF FUNCTION
        
     /**
     * Sets a new configuration-file
     *
     * \param The path to an configuration-file
     */
    void setConfigFile(const char * configFile) ;

    /**
     * \short Checks a given string (the output of a executed program) for the occurence of certain phrases.
     * \param &programOutput A reference to the output string.
     * \param pattern An Array with patterns to be searched for.
     * \return A negative integer, if no pattern was found in the output-string.
     *        Otherwise a positive integer, indication the index of the found phrase in the passed vector.
     */
    int checkOutputForPhrase(const string &programOutput,const vector<string> &patterns);
        
                        
     /**
     *  Performs a system test like specified in the given config-file.
     *
     * If successfull,a pointer to a vector of reports is returned. In case of
     * error 'NULL' is returned.
     */
    Reporter* performTest() ;
                        
        
  private:

    /**
    *  
    *  This function searches for an value defined by the given
    * regular expression in the given text.
    * The regex is expected to contain at least one sub-expression
    *            
    * If no matching value is found, false is returned. Otherwise true.
    * If the regexp contains errors, an error-message is displayed.
    */
    bool getValueByRegex(const char * regExp,string &searchStr,string &pReturn);
 
        /**
     * \short This functions reads the whole given file into a string-object.
     *
     * \param pFileToOpen Location of the file that should be read.
     * \param target A pointer to an object of class string.
     *                The whole file-content is appended to this string.
     *
     * \return boolean. True if file could be readed sucessfull. False if not.
         */
     bool readFileToBuffer(const string pFileToOpen  ,string &rString );

    /**
     *
     *
     */
    void buildConfigFromTpl(TiXmlElement* bElement , const string pSourceFile,string &generatedFile);

}; // END OF CLASS
#endif