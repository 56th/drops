{
//=============================================================
//    DROPS parameter file for twophasedrops
//    simulation of two-phase flow:
//    falling film flow
//=============================================================

//General section
        "General":
        {
                "ProgressBar": 0, //show progress bar
                "DynamicLibsPrefix": "../", //where should we look for shared objects?
                "DynamicLibs": [ //select libraries to be loaded after program start
                        "levelset/liblevelset-filmCoeff",
                        "misc/libmisc-scalarFunctions",
                        "misc/libmisc-vectorFunctions"
                ]
        },

// time stepping
        "Time":
        {
                "NumSteps":             10000,     // number of time steps
                "StepSize":             0.0001,    // time step size
                "Scheme":               1       // choose a specific time discretization
        },

// flow solver
        "Stokes":
        {
                "DirectSolve":          0,      // whether to use a direct solver (here: PARDISO) or
                                                // iterative solvers. If this is set to one, most other
                                                // parameters in this section are irrelevant.
                "StokesMethod":         10502,  // Stokes solver, cf. num/stokessolverfactory.h
                "InnerIter":            1000,   // maximum number of iterations for the inner solver
                "OuterIter":            200,    // maximum number of iterations for the outer solver
                "InnerTol":             1e-10,    // tolerance for the inner solver. (! Attention:
                                                // The inner solver tolerance should be chosen some
                                                // orders of magnitude smaller than the outer solver
                                                // tolerance, otherwise the outer solver diverges)
                "OuterTol":             1e-8,  // tolerance for the outer solver
                "PcAIter":              200,      // maximum number of iterations for the preconditioner
                                                // of the A-Block
                "PcATol":               0.0001,  // tolerance for the preconditioner of the A-Block
                "PcSTol":               0.0001, // tolerance for the preconditioner of the Schur complement
                "XFEMStab":             1,    // threshold for discarding additional dof parameters in
                                                // the XFEM pressure space. Using a negative value
                                                // yields the standard FEM pressure space.
                "Theta":                1       // controls the implicitness of the theta-scheme
                                                // for time discretization of the Navier-Stokes and
                                                // level set equations. Theta = 0 yields the explicit and
                                                // Theta = 1 the implicit Euler method. Theta = 0.5 results
                                                // in the Crank-Nicholson scheme.
        },

// Navier Stokes solver
        "NavStokes":
        {
                "Nonlinear":            0,      // determination of the influence of the nonlinear
                                                // inertia term. For Nonlinear = 0 the linear Stokes
                                                // equation and for Nonlinear = 1 the full Navier-Stokes
                                                // equation is solved.
                "Tol":                  5e-10,  // tolerance for the Navier-Stokes solver.
                "Iter":                 10,     // maximum number of iterations for the Navier-Stokes solver.
                "Reduction":            0.1,    // reduction of the Oseen residual by this factor.
                "Downwind":
                {
                        "Frequency": 0,         // 0 disables downwind-numbering
                        "MaxRelComponentSize": 0.05, // maximal cycle size before removing weak edges
                        "WeakEdgeRatio": 0.2,   // ration of the weak edges to remove for large cycles
                        "CrosswindLimit": 0.866 // cos(pi/6); smaller convection is not considered
                }
        },

// Levelset solver
        "Levelset":
        {
                "Tol":                  1e-16,  // tolerance for the level set solver.
                "Iter":                 1000,   // maximum number of iterations for the level set solver.
                "SD":                   1,    // parameter controls the stability of the advection equation
                                                // by streamline diffusion
                "CurvDiff":             -1,     // smoothing of level set function before the discretization
                                                // of the curvature term. ( ! Attention: The smoothing is only
                                                // applied on temporary variables used for the curvature
                                                // calculation. The interface remains unchanged.)
                "VolCorrection":        1,      // control of the volume correction. For VolCorrection = 0 no
                                                // correction is made and for VolCorrection = 1 it is carried
                                                // out after each time step and reparameterization of the level
                                                // set function.
                "Theta":                1,      // controls the implicitness of the theta-scheme for time
                                                // discretization of the Navier-Stokes and level set equations.
                                                // Theta = 0 yields the explicit and Theta = 1 the implicit
                                                // Euler method. Theta = 0.5 results in the Crank-Nicholson scheme.
                "Discontinuous":        0,

                "BoundaryType":         "98!98!98!98!98!98",     // List of boundary types separated by a !.
                                                           // Each defining a boundary type for one boundary
                                                           // domain ( The following indices may be used:
                                                           //          Dir0BC= 0, DirBC= 2, Per1BC= 13,
                                                           //          Per2BC= 11, Nat0BC= 21, NatBC= 23,
                                                           //          NoBC= 98, UndefinedBC_= 99        ).
                "BoundaryFncs":         "Zero!Zero!Zero!Zero!Zero!Zero",
                                                           // List of boundary functions separated by a !.
                                                           // Each string defines a function which is taken
                                                           // from a function container during runtime.


               "Downwind":
                {
                        "Frequency": 0,         // 0 disables downwind-numbering
                        "MaxRelComponentSize": 0.05, // maximal cycle size before removing weak edges
                        "WeakEdgeRatio": 0.2,   // ration of the weak edges to remove for large cycles
                        "CrosswindLimit": 0.866 // cos(pi/6); smaller convection is not considered
                }
        },

// coupling of Navier-Stokes and level set
        "Coupling":
        {
                "Tol":                  1e-10,  // tolerance for the coupling.
                "Iter":                 0,     // maximum number of iterations for the fixed-point iteration.
                                                // ( ! Attention: For Iter = -1 the calculation is carried out
                                                // until convergence).
                "Stab":                 1,      // Laplace-Beltrami-stabilization.
                "Projection":           0       // If Projection = 1, a projection step is carried out before
                                                // the fixed-point-iteration.
        },

// re-initialization of levelset function",
        "Reparam":
        {
                "Freq":                 1,      // number of timesteps before the levelset function is
                                                // reparameterized. Freq = 0 deactivates the reparameterization.
                "Method":               3,      // Method how to determine distance of frontier vertices and
                                                // propagation scheme, see documentation of ReparamFactoryCLfor
                                                // a detailed description
                "MinGrad":              1,    // minimal allowed norm of the gradient of the levelset function.
                "MaxGrad":              1,     // maximal allowed norm of the gradient of the levelset function.
                "NarrowBand":           -1      // Narrow-Band method for the Euclidian method.
                                                // (e. g. NarrowBand = 0.5 <=> all DOFs with < 50% of maximal
                                                // level set value are considered).
        },

// adaptive refinement
        "AdaptRef":
        {
                "Freq":                 10,      // number of timesteps before adaptive refinement is carried out.
                "FinestLevel":          2,      // number of refinement levels and label of the finest level
                                                // close to the phase boundary.
                "CoarsestLevel":        0,      // label of coarsest level close to the phase boundary.
                "Width":                0.0005,    // domain of refinement.
                "LoadBalStrategy":      1011    // load balancing method, see decompose.h for details
        },

// material data (all units are SI)
        "Mat":
        {
// material data, all units are SI, scaled by rho
//  "DensGas":		1,			// 'air' / silicon oil
//  "ViscGas":		1.425e-5,	// mu/rho
//  "DensFluid":		1,
//  "ViscFluid":		5.7e-6,	// mu/rho
//  "SmoothZone":		1e-4,	// inactive
//  "SurfTension":		0 // 5.5e-6	// tau/(0.4 rho_F + 0.6 rho_G)

       // material data, all units are SI
                "DensDrop":             909.3,      // density of gas
                "ViscDrop":             0.005183,     // dynamic viscosity of gas
                "DensFluid":            1.2,		// density of liquid film
                "ViscFluid":            1.71e-05,	// dynamic viscosity of liquid film
                "SmoothZone":           0.0001   // (deprecated) defines the width of the transition zone
                                                // surrounding the interface, where the density- and viscosity-
                                                // jump is smoothed numerically. In the current version we always
                                                // use a sharp interface w/o any smoothing, hence, this parameter
                                                // has no effect.
        },

// experimental conditions (all units are SI)
        "Exp":
        {
        		"Gravity":      [8.036, -5.627, 0 ],      // gravity vector  -> inclined film, 35 degree (0 degree = perpendicular)
		        "PumpAmpl":		0.2, 			        // rel. amplitude of initial wave in x direction 
		        "PumpFreq":		10, 
		        "Ampl_zDir":	0.5, 		            // rel. amplitude of initial wave in z direction
		        "Thickness":	0.000635, 	            // average film thickness
                "FlowDir":              0,                   // direction of the flow at the inlet.
                                                             // FlowDir = 0 / 1 / 2 describes the x- / y- / z-
                                                             // direction. If the flow is orientated in negativ
                                                             // coordinate direction, a minus sign must be used
                                                             // for the parameter InflowVel.
                "InflowVel":            0,                   // magnitude of the inflow velocity.
                "RadInlet":             1,                   // radius of the circular intake.
                "InflowFreq":           0,                   // inflow frequency.
                "InflowAmpl":           0,                   // inflow amplitude.
                "InitialLSet":          "WavyFilm",         // choose a LevelSet function you want to start with
                                                             // (default: 'Ellipsoid')
                "VolForce":             "ZeroVel"            // r.h.s. force of navier stokes equations.
                                                             // (default: 'ZeroVel')
        },

// surface tension
        "SurfTens":
        {
                "SurfTension":          0.022,      // surface tension coefficient.
                "VarTensionFncs":       "ConstTau"
        },

// mass transport
        "Transp":
        {
                "DoTransp":             0,      // mass transport (0 = deactivated, 1 = activated).
                "Theta":                0.5,    // time integration theta scheme.
                "Iter":                 200,    // maximum number of iterations.
                "Tol":                  1e-10,  // tolerance.
                "DiffPos":              0.005,  // diffusion coefficient (positiv part).
                "DiffNeg":              0.01,   // diffusion coefficient (negativ part).
                "HPos":                 1,      // Henry scaling number outside the droplet
                "HNeg":                 0.5,    // Henry scaling number inside the droplet
                "IniCPos":              0.1,    // initial concentration (positiv part).
                "IniCNeg":              5,      // initial concentration (negativ part).
                "NitschePenalty":       50,     // inactive! Penalty parameter for Nitsche formulation
                "NitscheXFEMStab":      0.05    // treshold for discarding extending dof parameters.
        },

// surfactant transport
        "SurfTransp":
        {
                "DoTransp":             0,      // 
                "Theta":                0.5,    // 
                "Iter":                 1000,   // 
                "Tol":                  1e-10,  // 
                "OmitBound":            -1.0,   // 
                "Visc":                 1e-5    // 
        },


// Visualization Toolkit output format settings
        "VTK":
        {
                "VTKOut":               1,                 // VTK output (0 = off, 1 = on).
                "VTKDir":               "vtk/film",             // local directory for VTK files.
                "VTKName":               "filmStokesDMS-T05",   // name of VTK files
                "AddP1XPressure":       1,                 // pressure output as p1 on neg. and p1 on pos. part      
                "AddDGOutput":          1,                 // additional VTK file(s) for levelset dg 
                "Binary":               0                  // write out VTK files in binary format.
        },

// write out results, read in for restart
        "Restart":
        {
                "Serialization":        1,                 // run serialization (0 = off, 1 = 0n).
                "Overwrite":            1,                 // overwrite old output-files or create new ones
                                                           // for every time step.
                "Inputfile":            "none",            // reads multigrid from deserialization files
                                                           // (to deactivate the reading choose Inputfile = none).
                "Outputfile":           "serial/filmNs.mg",         // writes multigrid to serialization files
                                                           // (to deactivate the writing choose Outputfile = none).
                "Binary":               0                  //
        },

        "Domain":
        {
                "Type": "BrickBuilder",      // A parallelepiped
                "Origin": [0,0,-2e-3],           // Origin
                "E1": [20.9e-3,0,0],               // Basis to span the object,
                "E2": [0,4e-3,0],               // not necessary orthonormal 
                "E3": [0,0,4e-3],               // ... 
                "N1": 20,                     // Number of cells along the E1-direction,
                "N2": 6,                     //                       the E2-direction,
                "N3": 2                     //                       the E3-direction.
         }, 
//  The functions declared in filmCoeff.cpp sill use MeshSize.
         "MeshSize":     [20.9e-3, 4e-3, 4e-3 ], 
// domain, boundary and initial conditions
        "DomainCond":
        {
                "PeriodicMatching":     "periodicxz",            // matching function 

                                                           // identifier for periodic boundaries
                "InitialCond":          1,                 // initial conditions (0 = zero, 1/2 = stationary
                                                           // flow with/without droplet, -1 = read from file).
                "InitialFile":          "serial/filmNs40",         // file prefix when reading data for initial condition.
                "BoundaryType":         "13!11!0!21!13!11",     // List of boundary types separated by a !.
                                                           // Each defining a boundary type for one boundary
                                                           // domain ( The following indices may be used:
                                                           //          Dir0BC= 0, DirBC= 2, Per1BC= 13,
                                                           //          Per2BC= 11, Nat0BC= 21, NatBC= 23,
                                                           //          NoBC= 98, UndefinedBC_= 99        ).
                "BoundaryFncs":         "ZeroVel!ZeroVel!ZeroVel!ZeroVel!ZeroVel!ZeroVel"
                                                           // List of boundary functions separated by a !.
                                                           // Each string defines a function which is taken
                                                           // from a function container during runtime.
        }
}
