/// \file xfem.h
/// \brief converter for P1 and P1X elements
/// \author LNM RWTH Aachen: Patrick Esser, Joerg Grande, Sven Gross, Volker Reichelt; SC RWTH Aachen:

/*
 * This file is part of DROPS.
 *
 * DROPS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DROPS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with DROPS. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * Copyright 2009 LNM/SC RWTH Aachen, Germany
*/

#ifndef DROPS_XFEM_H_
#define DROPS_XFEM_H_

#include "out/ensightOut.h"
#include "num/fe.h"

namespace DROPS
{

/// merges two p1-VectorCL into a p1x-VectorCL
void P1toP1X ( const IdxDescCL& xidx, VectorCL& p1x, const IdxDescCL& idx, const VectorCL& posPart, const VectorCL& negPart, const VecDescCL& lset, const MultiGridCL& mg );

/// splits a p1x-VectorCL into two p1-VectorCL
void P1XtoP1 ( const IdxDescCL& xidx, const VectorCL& p1x, const IdxDescCL& idx, VectorCL& posPart, VectorCL& negPart, const VecDescCL& lset, const MultiGridCL& mg );


#ifndef _PAR
///\brief Represents a scalar P1X function as two Ensight6 variables.
///
/// The class registers two P1-functions, neg and pos, which do the actual output. In order to prepare the data
/// needed by them, it registers itself with a put-routine that sets up the piecewise P1-data. Note, that we depend
/// on the order
/// in which Ensight6OutCL calls the routines: Lexicographically (a std::map<> varName --> Ensight6VariableCL*), the
/// P1-variables follow after the variable itself as we append "Neg" resp. "Pos" to its name.
///
/// The filenames are also generated by appending "Neg" and "Pos" to the provided filename.
class Ensight6P1XScalarCL : public Ensight6VariableCL
{
  private:
    const VecDescCL& v_;

    mutable IdxDescCL p1idx_;
    mutable VecDescCL vneg_,
                      vpos_;

    const VecDescCL& lset_;
    BndDataCL<> bnd_;
    MultiGridCL& mg_;

  public:
    Ensight6P1XScalarCL (MultiGridCL& mg, const VecDescCL& lset, const VecDescCL& v, const BndDataCL<>& bnd,
        std::string varName, std::string fileName, bool timedep= false)
        : Ensight6VariableCL( varName, fileName, timedep),
          v_( v), vneg_( &p1idx_), vpos_( &p1idx_), lset_( lset), bnd_( bnd), mg_( mg) {}
    ~Ensight6P1XScalarCL () { if (p1idx_.NumUnknowns() != 0) p1idx_.DeleteNumbering( mg_); }

    void Describe (Ensight6OutCL& cf) const {
        cf.Register( make_Ensight6Scalar( make_P1Eval( mg_, bnd_, vneg_), varName()+"Neg", fileName()+"Neg", Timedep()));
        cf.Register( make_Ensight6Scalar( make_P1Eval( mg_, bnd_, vpos_), varName()+"Pos", fileName()+"Pos", Timedep()));
    }
    void put      (Ensight6OutCL&)    const {
        if (p1idx_.NumUnknowns() != 0)
            p1idx_.DeleteNumbering( mg_);
        p1idx_.CreateNumbering( v_.RowIdx->TriangLevel(), mg_, *v_.RowIdx);
        P1XtoP1 ( *v_.RowIdx, v_.Data, p1idx_, vpos_.Data, vneg_.Data, lset_, mg_);
    }
};

///\brief Create an Ensight6P1XScalarCL with operator new.
///
/// This is just for uniform code; the analoguous functions for scalars and vectors are more useful because
/// they help to avoid template parameters in user code.
inline Ensight6P1XScalarCL&
make_Ensight6P1XScalar (MultiGridCL& mg, const VecDescCL& lset, const VecDescCL& v,
    std::string varName, std::string fileName, bool timedep= false)
{
    return *new Ensight6P1XScalarCL( mg, lset, v, BndDataCL<>( 0), varName, fileName, timedep);
}

inline Ensight6P1XScalarCL&
make_Ensight6P1XScalar (MultiGridCL& mg, const VecDescCL& lset, const VecDescCL& v, const BndDataCL<>& bnd,
    std::string varName, std::string fileName, bool timedep= false)
{
    return *new Ensight6P1XScalarCL( mg, lset, v, bnd, varName, fileName, timedep);
}
#endif

} // end of namespace DROPS

#endif /* DROPS_XFEM_H_ */
