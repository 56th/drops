#=============================================================
#    DROPS parameter file for twophasedrops
#    simulation of two-phase flow:
#    droplet in brick
#=============================================================

# time stepping
Time {
  NumSteps      = 5
  StepSize      = 3e-3
  Scheme        = 1         # time integration: 1=linthetascheme, 2=recthetascheme, 3=, 4=operator splitting, 5=cranknicolson
}

# flow solver
Stokes {
  StokesMethod  = 20401     # see num/stokessolverfactory.h for details
  InnerIter     = 1000
  OuterIter     = 200
  InnerTol      = 0.6       # inner reduction for InexactUzawa
  OuterTol      = 1e-10
  PcAIter       = 500       # V-cycles multigrid, iter pc for A block
  PcATol        = 1e-2      # abs. resid for multigrid, otherwise rel. resid
  PcSTol        = 1e-2      # resid for schur komplememt preconditioner
  XFEMStab      = 0.1
  Theta         = 1         # backward Euler
}

NavStokes {
  Nonlinear     = 1         # 1 = Navier Stokes; 0 = Stokes
  Tol           = 1e-10     # 0.1 for recthetascheme
  Iter          = 20
  Reduction     = 0.1
}

# levelset solver
Levelset {
  Tol           = 1e-10
  Iter          = 1000
  SD            = 0.1       # streamline diffusion parameter
  CurvDiff      = -1
  VolCorrection = 1         # volume correction every n steps
  Theta         = 1         # backward Euler
}

Coupling {
  Tol           = 1e-10     # for recthetascheme
  Iter          = 10        # -1 = till convergence
  Stab          = 0.        # laplace beltrami stabilization
  Projection    = 0         # only thetascheme: 1 = Perform a projection step before FP
}

# re-initialization of levelset function
Reparam {
  Freq          = 1         # reparametrization every n steps
  Method        = 1         # 0/1 = fast marching without/with modification of zero, 2 = evolve rep. eq., 3 = Euklidian method
  MinGrad       = 0.1       # minimal allowed norm of the gradient of phi
  MaxGrad       = 10        # maximal allowed norm of the gradient of phi
  NarrowBand    = -1.0      # Narrow-Band method, if euclidian reparametrization is used
}

# adaptive refinement
AdaptRef {
  Freq          = 1         # adaptive refinement every n steps
  FinestLevel   = 1         # finest level used in refinement strategy
  CoarsestLevel = 0
  Width         = 0.4e-3
  RefineStrategy= 1         # algorithm to determine the load balancing graph for refinement
}

# material data, all units are SI
Mat {
  DensDrop      = 845.442   # butanol - water
  ViscDrop      = 3.281e-3
  DensFluid     = 986.506
  ViscFluid     = 1.388e-3
  SmoothZone    = 1e-4
}

# experimental conditions
Exp {
  RadDrop       = 2e-3   2e-3   2e-3
  PosDrop       = 6e-3   3e-3   6e-3
  Gravity       = 0     -9.81   0
  FlowDir       = 1         # flow in y-direction
  InflowVel     = 0
  RadInlet      = 5e-3      # 3.5e-3 for old meas. cell
  InflowFreq    = 0         # inflow frequence
  InflowAmpl    = 0         # inflow amplitude
}

# surface tension
SurfTens {
  VarTension    = 0         # 0=off, 1=on
  SurfTension   = 1.63e-3   # surface tension coefficient
  JumpWidth     = 5e-4      # jump width
  RelPos        = 1.5       # position of the jump between upper edge (lambda=0) and barycenter (lambda=1)
  DirtFactor    = 0.8       # red. factor for surface tension (due to contamination) in lower droplet)
}

# mass transport
Transp {
  DoTransp      = 0         # 0=off, 1=on
  Theta         = 0.5       # time integration theta scheme
  Iter          = 200
  Tol           = 1e-10
  DiffPos       = 5e-3      # diffusion coefficient (pos. part)
  DiffNeg       = 1e-2      # diffusion coefficient (neg. part)
  H             = 0.5       # Henry number cneg(\infty) = H*cpos(\infty)
  IniCPos       = 0.1       # initial concentration (pos. part)
  IniCNeg       = 5         # initial concentration (neg. part)
  NitschePenalty  =       0
  NitscheXFEMStab =       0.1
}

# surfactant transport
SurfTransp {
  DoTransp      = 0         # 0=off, 1=on
  Theta         = 0.5
  Iter          = 1000
  Tol           = 1e-10
  OmitBound     = -1.       # keeps all dof
  Visc          = 1e-5      # interfacial diffusion coefficient
}

# Ensight settings
Ensight {
  EnsightOut    = 1
  EnsCase       = nsmzi
  EnsDir        = ensight
  Binary        = 0          # 1 = binary output, 0 = ascii output
  MasterOut     = 1
  GeomName      = Brick
}

#VTK output
VTK{
  VTKOut        = 0
  VTKDir        = vtk
  VTKName       = nsmzi
  Binary        = 0
}

# Write out results
Restart {
  Serialization = 0
  Overwrite     = 0
  Inputfile     = none
  Outputfile    = ./geometry/
}

# domain, bnd/ini conditions
DomainCond {
  InitialCond   = 0	  # 0=zero, 1/2=flow with/without drop, -1=read from file
  GeomType      = 1	  # 0=ReadMeshBuilder, 1=BrickBuilder
  InitialFile   = ensight/nsmzi
  MeshFile      = 12e-3x30e-3x12e-3@4x10x4
  BoundaryType  = 3   # boundary type: 0= meas. cell, 1= hom. Dirichlet, 2= inhom. Dirichlet, 3= tube
}
