/// \file topo.cpp.in
/// \brief contains automatically generated refinement rules
/// \author LNM RWTH Aachen: Sven Gross, Joerg Peters, Volker Reichelt; SC RWTH Aachen:

/*
 * This file is part of DROPS.
 *
 * DROPS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * DROPS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with DROPS. If not, see <http://www.gnu.org/licenses/>.
 *
 *
 * Copyright 2009 LNM/SC RWTH Aachen, Germany
*/

/// \remarks generated from 'topo.cpp.in' by 'maketopo'

#include "geom/topo.h"

namespace DROPS
{

const Ubyte VertOfFaceAr[NumAllFacesC][3]= {
    {1,2,3}, {0,2,3}, {0,1,3}, {0,1,2},
    {1,6,8}, {6,2,9}, {6,8,9}, {8,9,3}, {1,2,9}, {1,9,3}, {1,2,8}, {2,8,3}, {1,6,3}, {6,2,3}, {2,8,9}, {6,8,3}, {6,9,3},
    {0,5,7}, {5,2,9}, {5,7,9}, {7,9,3}, {0,2,9}, {0,9,3}, {0,2,7}, {2,7,3}, {0,5,3}, {5,2,3}, {2,7,9}, {5,7,3}, {5,9,3},
    {0,4,7}, {4,1,8}, {4,7,8}, {7,8,3}, {0,1,8}, {0,8,3}, {0,1,7}, {1,7,3}, {0,4,3}, {4,1,3}, {1,7,8}, {4,7,3}, {4,8,3},
    {0,4,5}, {4,1,6}, {4,5,6}, {5,6,2}, {0,1,6}, {0,6,2}, {0,1,5}, {1,5,2}, {0,4,2}, {4,1,2}, {1,5,6}, {4,5,2}, {4,6,2},
    {0,1,9}, {0,2,8}, {0,4,9}, {0,5,8}, {0,6,3}, {0,6,7}, {0,6,8}, {0,6,9},
    {0,8,9}, {1,2,7}, {1,5,3}, {1,5,7}, {1,5,8}, {1,5,9}, {1,6,7}, {1,7,9},
    {2,7,8}, {4,1,9}, {4,2,3}, {4,2,7}, {4,2,8}, {4,2,9}, {4,5,3}, {4,5,7},
    {4,5,8}, {4,5,9}, {4,6,3}, {4,6,7}, {4,6,8}, {4,6,9}, {4,7,9}, {4,8,9},
    {4,9,3}, {5,2,8}, {5,6,3}, {5,6,7}, {5,6,8}, {5,6,9}, {5,7,8}, {5,8,3},
    {5,8,9}, {6,2,7}, {6,7,3}, {6,7,8}, {6,7,9}, {7,8,9} };

const Ubyte VertOfEdgeAr[NumAllEdgesC][2] = {
    {0,1}, {0,2}, {1,2}, {0,3}, {1,3}, {2,3},
    {0,4}, {4,1}, {0,5}, {5,2}, {1,6}, {6,2}, {0,7}, {7,3}, {1,8}, {8,3}, {2,9}, {9,3},
    {1,9}, {2,8}, {6,3}, {0,9}, {2,7}, {5,3}, {0,8}, {1,7}, {4,3}, {0,6}, {1,5}, {4,2},
    {6,8}, {6,9}, {8,9}, {5,7}, {5,9}, {7,9}, {4,7}, {4,8}, {7,8}, {4,5}, {4,6}, {5,6},
    {5,8}, {4,9}, {6,7} };

const byte EdgeByVertAr[NumAllVertsC][NumAllVertsC] = {
    {-1,  0,  1,  3,  6,  8, 27, 12, 24, 21},
    { 0, -1,  2,  4,  7, 28, 10, 25, 14, 18},
    { 1,  2, -1,  5, 29,  9, 11, 22, 19, 16},
    { 3,  4,  5, -1, 26, 23, 20, 13, 15, 17},
    { 6,  7, 29, 26, -1, 39, 40, 36, 37, 43},
    { 8, 28,  9, 23, 39, -1, 41, 33, 42, 34},
    {27, 10, 11, 20, 40, 41, -1, 44, 30, 31},
    {12, 25, 22, 13, 36, 33, 44, -1, 38, 35},
    {24, 14, 19, 15, 37, 42, 30, 38, -1, 32},
    {21, 18, 16, 17, 43, 34, 31, 35, 32, -1} };

const byte VertByEdgeAr[NumEdgesC][NumEdgesC] = {
    { -1,  0,  1,  0,  1, -1 },
    { -1, -1,  2,  0, -1,  2 },
    { -1, -1, -1, -1,  1,  2 },
    { -1, -1, -1, -1,  3,  3},
    { -1, -1, -1, -1, -1,  3 },
    { -1, -1, -1, -1, -1, -1 } };

//@@@ 'maketopo' will replace this line!! @@@

// The arrays parent_to_child_bary_ar and child_to_parent_bary_ar were generated
// with the following code and manual formatting of the output (including rounding
// small entries to zero. The corresponding entries are exact inverses of each other.
// Mind however the factor 2 used in child_to_parent_bary_ar to make the entries
// integers.
// void
// to_parent_bary (Uint ch, SMatrixCL<4,4>& T)
// {
//     const ChildDataCL& child= GetChildData( ch);
//     for (Uint i= 0; i < NumVertsC; ++i) {
//         const Uint v= child.Vertices[i];
//         if (v < NumVertsC)
//             T.col( i, std_basis<4>( v + 1));
//         else
//             T.col( i, 0.5*(std_basis<4>( VertOfEdge( v - 4, 0) + 1) + std_basis<4>( VertOfEdge( v - 4, 1) + 1)));
//     }
// }
//
// void
// to_child_bary (Uint ch, QRDecompCL<4>& T)
// {
//     to_parent_bary( ch, T.GetMatrix());
//     T.prepare_solve();
// }
//
// int main ()
// {
//     SMatrixCL<4,4> T( Uninitialized);
//     QRDecompCL<4> S;
//     SMatrixCL<4,4> Smat( Uninitialized);
//     for (Uint i=0; i < NumAllChildrenC; ++i) {
//     //    to_parent_bary( i, T);
//     //    std::cout << i << ' ' << 2.*static_cast<SMatrixCL<4,4>::_vec_base&>( T) << '\n';
//         to_child_bary( i, S);
//         for (Uint j= 0; j < 4; ++j) {
//             BaryCoordCL tmp= std_basis<4>( j + 1);
//             S.Solve( tmp);
//             Smat.col( j, tmp);
//         }
//         std::cout << i << ' ' << static_cast<SMatrixCL<4,4>::_vec_base&>( Smat) << '\n';
//     }
//     return 0;
// }
const byte parent_to_child_bary_ar[]= {
    1, -1, -1, -1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    2, 0, 0, 0, -1, 1, -1, -1, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, -1, 0, 0, 0, 2,
    1, 1, -1, -1, 0, 0, 2, 0, 1, -1, -1, 1, -1, 1, 1, 1,
    2, 0, 0, 0, 0, 2, 0, 0, -1, -1, 1, -1, 0, 0, 0, 2,
    2, 0, 0, 0, -1, 1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1,
    1, 1, 1, -1, 1, -1, -1, 1, 0, 2, 0, 0, -1, -1, 1, 1,
    2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, -1, -1, -1, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    1, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 2,
    1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    1, 0, -1, -1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 0, -1, 0, 0, 1, 0, -1, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    1, 0, 0, -1, 0, 1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 1, -1, -1, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, -1, 1,
    1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, -1, 0, 1,
    1, 0, 0, 0, 0, 1, 1, -1, 0, 2, 0, 0, 0, -2, 0, 2,
    1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    1, -1, 0, -1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 1, -1, 0, 0, 0, 2,
    1, -1, -1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, -1, 1,
    1, 0, -1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, -1, 0, 1,
    1, 0, 0, 0, 0, 2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1,
    1, 0, 0, -1, 0, 2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 2, 0, 0, 0, -1, 1, -1, 0, 0, 0, 2,
    1, 0, 0, 0, 0, 0, 2, 0, 0, 2, -2, 0, 0, -1, 1, 1,
    1, 0, 0, 0, 0, 1, 1, -1, 0, 1, -1, 1, 0, -1, 1, 1,
    1, 0, 0, 0, 0, 2, 0, 0, 0, -2, 2, 0, 0, 1, -1, 1,
    1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, -1, -1, 1,
    0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, -1, 0, 0, 1,
    1, 1, 0, -1, 0, 0, 1, 0, 2, 0, 0, 0, -2, 0, 0, 2,
    0, 1, 0, 0, 1, 0, 1, -1, 2, 0, 0, 0, -2, 0, 0, 2,
    0, 1, 0, 0, 2, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1,
    0, 1, 0, -1, 2, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 2,
    0, 1, 0, 0, 2, 0, 0, 0, -1, 0, 1, -1, 0, 0, 0, 2,
    1, 1, -1, 0, 2, 0, 0, 0, -2, 0, 2, 0, 0, 0, 0, 1,
    1, 1, -1, -1, 2, 0, 0, -2, -2, 0, 2, 2, 0, 0, 0, 2,
    1, 1, -1, -1, 2, 0, 0, 0, -2, 0, 2, 0, 0, 0, 0, 2,
    0, 1, 0, 0, 0, 0, 2, 0, 2, 0, -2, 0, -1, 0, 1, 1,
    1, 1, -1, -1, 0, 0, 2, 0, 2, 0, -2, 0, -2, 0, 2, 2,
    0, 1, 0, 0, 1, 0, 1, -1, 1, 0, -1, 1, -1, 0, 1, 1,
    0, 1, 0, 0, 2, 0, 0, 0, -2, 0, 2, 0, 1, 0, -1, 1,
    0, 1, -1, 0, 0, 0, 2, 0, 2, 0, 0, 0, -1, 0, 0, 1,
    1, 1, -1, -1, 0, 0, 2, 0, 2, 0, 0, 0, -2, 0, 0, 2,
    0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 2, 0, -1, 0, -1, 1,
    0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, -1, -1, 0, 1,
    1, 1, 1, -1, 2, 0, 0, 0, 0, 2, 0, 0, -2, -2, 0, 2,
    2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    2, 0, 0, 0, -1, 1, 0, -1, 0, 0, 1, 0, 0, 0, 0, 2,
    2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, -1, 0, 0, 0, 2,
    2, 0, 0, 0, -1, 1, -1, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    2, 0, 0, 0, -1, 1, 0, 0, 0, 0, 2, 0, 0, 0, -1, 1,
    0, 2, 0, 0, 0, 0, 1, 0, 2, -2, 0, 0, -1, 1, 0, 1,
    1, 1, 0, -1, 0, 0, 1, 0, 1, -1, 0, 1, -1, 1, 0, 1,
    0, 2, 0, 0, 1, -1, 1, -1, 2, -2, 0, 0, -2, 2, 0, 2,
    2, 0, 0, 0, 0, 0, 1, 0, -2, 2, 0, 0, 1, -1, 0, 1,
    2, 0, 0, 0, -1, 1, 1, -1, -2, 2, 0, 0, 2, -2, 0, 2,
    0, 2, 0, 0, 2, -2, 0, 0, -1, 1, 1, 0, 0, 0, 0, 1,
    0, 2, 0, -2, 2, -2, 0, 2, -1, 1, 1, -1, 0, 0, 0, 2,
    0, 2, 0, 0, 2, -2, 0, 0, -1, 1, 1, -1, 0, 0, 0, 2,
    1, 1, -1, 0, 1, -1, 1, 0, -1, 1, 1, 0, 0, 0, 0, 1,
    1, 1, -1, 1, 1, -1, 1, -1, -1, 1, 1, -1, 0, 0, 0, 2,
    0, 2, 0, 0, 0, 0, 2, 0, 2, -2, -2, 0, -1, 1, 1, 1,
    0, 2, 0, 0, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1,
    2, 0, -2, 0, 0, 0, 2, 0, -2, 2, 2, 0, 1, -1, -1, 1,
    0, 2, 0, 0, 2, -2, 0, 0, -2, 2, 2, 0, 1, -1, -1, 1,
    2, 0, 0, 0, -2, 2, 0, 0, 1, -1, 1, 0, 0, 0, 0, 1,
    2, 0, 0, -2, -2, 2, 0, 2, 1, -1, 1, -1, 0, 0, 0, 2,
    2, 0, 0, 0, -2, 2, 0, 0, 1, -1, 1, -1, 0, 0, 0, 2,
    1, 1, -1, -1, 0, 0, 2, 0, 1, -1, 1, 1, -1, 1, -1, 1,
    2, 0, 0, 0, 0, 0, 2, 0, -2, 2, -2, 0, 1, -1, 1, 1,
    2, 0, 0, 0, -1, 1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1,
    2, 0, 0, 0, -2, 2, 0, 0, 2, -2, 2, 0, -1, 1, -1, 1,
    1, 1, 1, -1, 1, -1, -1, 1, -1, 1, -1, 1, 0, 0, 2, 0,
    0, 2, 0, 0, 2, -2, 0, 0, 0, 0, 2, 0, -1, 1, -1, 1,
    2, 0, 0, 0, -2, 2, 0, 0, 0, 0, 2, 0, 1, -1, -1, 1,
    2, 0, 0, 0, -1, 0, 1, 0, 0, 2, 0, 0, 0, -1, 0, 1,
    2, 0, 0, 0, -1, 1, 1, -1, 0, 2, 0, 0, 0, -2, 0, 2,
    2, 0, 0, 0, 0, 2, 0, 0, -1, -1, 1, 0, 0, 0, 0, 1,
    1, -1, 1, -1, 0, 2, 0, 0, 1, 1, -1, 1, -1, -1, 1, 1,
    2, 0, 0, 0, -2, 0, 2, 0, 2, 2, -2, 0, -1, -1, 1, 1,
    2, 0, 0, 0, 0, 2, 0, 0, -2, -2, 2, 0, 1, 1, -1, 1,
    0, 0, 2, 0, 2, 0, -2, 0, 0, 2, 0, 0, -1, -1, 1, 1,
    2, 0, 0, 0, 0, 2, 0, 0, -2, 0, 2, 0, 1, -1, -1, 1,
    0, 2, 0, 0, 0, -1, 1, 0, 2, 0, 0, 0, -1, 0, 0, 1,
    0, 2, 0, 0, 1, -1, 1, -1, 2, 0, 0, 0, -2, 0, 0, 2,
    0, 0, 2, 0, 2, 0, 0, 0, 0, 2, -2, 0, -1, -1, 1, 1,
    1, 1, 1, -1, 2, 0, 0, 0, -1, 1, -1, 1, -1, -1, 1, 1,
    0, 2, 0, 0, 2, 0, 0, 0, 0, -2, 2, 0, -1, 1, -1, 1
};

const byte child_to_parent_bary_ar[]= {
    2, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1,
    1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1,
    1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 2,
    2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1,
    2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    2, 0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    2, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    2, 0, 0, 1, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2,
    2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2,
    2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 1,
    2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1,
    2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1,
    2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2,
    2, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2,
    2, 0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1,
    2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    2, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
    2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2,
    2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2,
    0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2,
    0, 0, 1, 0, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 1,
    0, 0, 1, 0, 2, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 1,
    0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2,
    0, 1, 0, 0, 2, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 1,
    0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1,
    0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 2,
    0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1,
    0, 1, 0, 0, 2, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1,
    0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    0, 1, 1, 0, 2, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,
    0, 1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1,
    0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2,
    0, 0, 1, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    0, 0, 1, 0, 2, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,
    0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2,
    0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 1, 2,
    0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 1, 1,
    1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2, 1, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2,
    1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 1, 2,
    1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 2,
    1, 0, 1, 0, 1, 0, 0, 1, 0, 2, 0, 0, 0, 0, 1, 1,
    1, 0, 1, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 1,
    1, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 2,
    1, 0, 0, 0, 1, 0, 1, 0, 0, 2, 0, 1, 0, 0, 1, 1,
    1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2,
    1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 1,
    1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1,
    1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 2,
    1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,
    1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1,
    1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2,
    1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 2,
    1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1,
    1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1,
    1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1,
    1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 2,
    1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1,
    1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2,
    1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1,
    1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2,
    1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2,
    1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 0, 0, 0, 1, 2,
    1, 0, 0, 0, 0, 0, 1, 0, 1, 2, 0, 1, 0, 0, 1, 1,
    1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 2, 0, 0, 0, 0, 2,
    1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1,
    1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 2,
    1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 2,
    1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2,
    1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2,
    0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 0, 0, 0, 1, 2,
    0, 0, 1, 0, 1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 1, 1,
    0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 2,
    0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1,
    0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 2
};

} // end of namespace DROPS
